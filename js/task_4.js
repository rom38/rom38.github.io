// Задание 4.
// Реализовать следующее консольное приложение подобно
// примеру, который разбирался в видео. Реализуйте его на прототипах.

// Определить иерархию электроприборов.
// Включить некоторые в розетку. Посчитать потребляемую мощность. 

// Таких приборов должно быть, как минимум, два
// (например, настольная лампа и компьютер).
// Выбрав прибор, подумайте, какими свойствами он обладает.

// План:

// Определить родительскую функцию с методами, которые
// включают/выключают прибор из розетки.
// Создать делегирующую связь [[Prototype]] для двух
// конкретных приборов.
// У каждого из приборов должны быть собственные свойства
// и, желательно, методы, отличные от родительских методов.
// Создать экземпляры каждого прибора.
// Вывести в консоль и посмотреть результаты работы,
// гордиться собой. :)

// Общие требования:
// Имена функций, свойств и методов должны быть информативными.
// Соблюдать best practices:
// использование camelCase нотации для переменных и методов,
// PascalCase для названия функций-конструкторов и классов;
// инфpowerормативные имена (а не a, b);
// четкая связь между классом и его экземплярами
// (класс описывает множество, а экземпляр конкретную реализацию);
// использование синтаксиса ES6 (кроме
// функции-конструкторов) и т. д.

let lamp = {wattPower: 10}
let comp = {wattPower: 20}

function Soket() {
    let summPower = 0
    for (let arg =0; arg < arguments.length; ++ arg){
        summPower += getWattPower(arguments[arg])
    }
    return `Summ power - ${summPower} watts`

    function getWattPower(electricDevice) {
        for (let key in electricDevice) {
            if (key === 'wattPower') {
                return electricDevice[key]
            }
        }
    }
}

function ElectricDevice(wattPower, isPlugged) {
    this.wattPower = wattPower
    this.isPlugged = isPlugged

}

function Lamp() {

}

function Computer(){

}

console.log(Soket(lamp, comp))